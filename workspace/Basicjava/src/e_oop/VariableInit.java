package e_oop;

public class VariableInit {
	
	//명시적 초기화
	int var = 10;//인스턴스 변수
	static int staticVar = 20;//클래스 변수
	
	//초기화 블럭
	{	//중괄호를 열음로써 초기화 할수 있음
		//초기화 블럭을 열면 그 안에서 그냥 코드를 작성할 수 있다.
		var = 30;
	}
	
	static{//클래스 변수를 초기화하고 싶다면 static을 붙이면 된다.
		staticVar = 40;
	}
	
	/*
	 * ★ 생성자
	 * - 클래스와 같은 이름의 메서드
	 * - 인스턴스 변수를 초기화하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 * - 생성자는 리턴타입이 없다.
	 */
	
	VariableInit(){//우리가 만들지 않으면 컴파일러가 이런 형태의 생성자를 만들어준다.
		var = 50;//이안에서는 인스턴스변수만 초기화 하는것을 권장
		
		//staticVar = 60;
		//=> 값을 공유해야 하는 클래스 변수가 객체 생성 시 마다 계속 초기화하기 때문에
		//클래스 변수를 생성자에서 초기화하는 것은 좋지 않다.
		
		//생성자 사용 이유
		//초기화에 여러줄의 코드가 필요할 때
		//초기화에 파라미터가 필요할 때
	}
	
	public static void main(String[] args) {
		Init i = new Init();
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(70, 80, 90);
	}
}

class Init{
	int a;
	int b;
	int c;
	
	Init(int a, int b, int c){//파라미터가 있는 생성자
		this.a = a;
		this.b = b;
		this.c = c;
		//this : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
	}
	
	Init(){//파라미터가 없는 생성자
//		a = 10;
//		b = 20;
//		c = 30;
		this(10,20,30);// 생성자에서 맨첫줄에만 사용가능, 아닌경우 컴파일 에러 발생
		//this() : 생성자에서 다른 생성자를 호출할 때 사용한다.
		//중복되는 값을 제거하기 위해 사용
	//객체지향의 목표 : 중복되는 코드를 줄이자
	}
	//메서드의 이름은 중복될 수 있다. 즉, 2개 이상의 같은이름의 메서드가 존재할 수 있다는 듯
	//오버로딩 : 같은 이름의 메서드를 여러개 정의하는 것
	//파라미터로 구분함(파라미터가 다르면 다른 메서드가 되는 것)
	
}
